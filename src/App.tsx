import { useState, useEffect, useCallback } from "react";
import "./App.css";
import {
  CommunicationChannelService,
  createCommunicationChannelService,
} from "./services/CommunicationChannelService";
import {
  ChannelEventType,
  type ChannelEvent,
  type WeatherData,
} from "./services/types";
import { createWeatherChannel } from "./services/utils";

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const [weatherData, setWeatherData] = useState<WeatherData | undefined>();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  const [events, setEvents] = useState<ChannelEvent[]>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  const [allUnavailable, setAllUnavailable] = useState(false);
  const [service, setService] = useState<
    CommunicationChannelService | undefined
  >();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const serviceInit = useCallback(() => {
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const primaryChannel = createWeatherChannel(
      "OpenWeatherMap API",
      "idle",
      0.01,
      500,
      2
    );
    const secondaryChannel = createWeatherChannel(
      "Weather.com API",
      "idle",
      0.05,
      800,
      1
    );
    const tertiaryChannel = createWeatherChannel(
      "AccuWeather API",
      "idle",
      0.1,
      1200,
      0
    );

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –∫–∞–Ω–∞–ª–∞–º–∏
    const service = createCommunicationChannelService({
      channels: [primaryChannel, secondaryChannel, tertiaryChannel],
      checkIntervalMs: 5000, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      monitorIntervalMs: 2000, // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      bufferSize: 5,
    });

    setService(service);

    return service;
  }, []);

  useEffect(() => {
    const service = serviceInit();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
    const unsubscribe = service.subscribe((event) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      setEvents((prev) => [event, ...prev].slice(0, 10));

      // –ï—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (event.type === ChannelEventType.AllChannelsUnavailable) {
        setAllUnavailable(true);
      } else {
        setAllUnavailable(false);
      }

      if (event.type === ChannelEventType.ChannelConnected) {
        service.fetchData().then((data) => {
          if (data) {
            setWeatherData(data);
          }
        });
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const fetchInterval = setInterval(async () => {
      const data = await service.fetchData();
      if (data) {
        setWeatherData(data);
      }
    }, 3000);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearInterval(fetchInterval);
      unsubscribe();
      service.dispose();
    };
  }, [serviceInit]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
  const switchToChannel = useCallback(
    (channelId: string) => {
      service?.switchToChannel(channelId, true);
    },
    [service]
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
  const simulateError = useCallback(() => {
    service?.fetchData(true);
  }, [service]);

  return (
    <div className="App">
      <h1>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏</h1>

      <div className="data-container">
        <h2>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ</h2>
        {weatherData ? (
          <div className="weather-data">
            <p>
              <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong>
              <span>{weatherData.source}</span>
            </p>
            <p>
              <strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong>
              <span>{weatherData.temperature}¬∞C</span>
            </p>
            <p>
              <strong>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</strong>
              <span>{weatherData.humidity}%</span>
            </p>
            <p>
              <strong>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</strong>
              <span>{weatherData.windSpeed} –∫–º/—á</span>
            </p>
          </div>
        ) : (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        )}

        {allUnavailable && (
          <div className="error-message">
            <p>
              ‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏.
            </p>
          </div>
        )}
      </div>

      <div className="channels-container">
        <h2>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏</h2>
        <div className="channels-list">
          {service?.getChannels().map((channel) => (
            <div
              key={channel.id}
              className={`channel-item status-${channel.status}`}
            >
              <div className="channel-info">
                <span className="channel-name">{channel.id}</span>
                <span className="channel-status">
                  {channel.status === "connected"
                    ? "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    : channel.status === "idle"
                    ? "üü° –ì–æ—Ç–æ–≤"
                    : "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                </span>
              </div>
              <button
                onClick={() => switchToChannel(channel.id)}
                disabled={
                  channel.status === "unavailable" ||
                  channel.status === "connected"
                }
              >
                –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
              </button>
            </div>
          ))}
        </div>

        <button onClick={simulateError}>
          –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
        </button>
      </div>

      <div className="events-container">
        <h2>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π</h2>
        <div className="events-list">
          {events.map((event, index) => (
            <div key={index} className={`event-item event-${event.type}`}>
              <span className="event-time">
                {new Date(event.timestamp).toLocaleTimeString()}
              </span>
              <span className="event-type">
                {event.type === ChannelEventType.ChannelConnected
                  ? "üü¢ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω"
                  : event.type === ChannelEventType.ChannelDisconnected
                  ? "üî¥ –ö–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω"
                  : event.type === ChannelEventType.ChannelRecovered
                  ? "üü° –ö–∞–Ω–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                  : event.type === ChannelEventType.AllChannelsUnavailable
                  ? "‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                  : event.type === ChannelEventType.SwitchedToChannel
                  ? "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª"
                  : event.type}
              </span>
              {event.channel && (
                <span className="event-channel">{event.channel.id}</span>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default App;
